package main.java;

import main.java.controls.FlowEditor;
import main.java.controls.MinimalHTMLEditor;
import main.java.structures.DebateEvents;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Properties;
import java.util.concurrent.atomic.AtomicReference;

//TODO document
public class SaveHandler {
	private final Properties saveProperties = new Properties();
	private final FlowEditor editor;
	private       File       workingFile;

	public SaveHandler(FlowEditor editor, File workingFile) {
		this.editor = editor;
		this.workingFile = workingFile;
	}

	public File getWorkingFile() {
		return workingFile;
	}

	public void save() throws IOException {
		saveProperties.put("Event", editor.debateEventProperty().getValue().getName());
		saveProperties.put("Layout", editor.getLayoutString());
		editor.getEditorHashMap().forEach((k, v) -> saveProperties.put(k.getName(), v.getHtmlText()));
		saveProperties.store(new FileOutputStream(workingFile), "Save file generated by DebateApp");
	}

	public void open(File file, DebateEvents events) throws IOException {
		workingFile = file;

		AtomicReference<String> event = new AtomicReference<>();
		AtomicReference<String> layout = new AtomicReference<>();
		HashMap<String, String> text = new HashMap<>();

		saveProperties.load(new FileInputStream(workingFile));
		saveProperties.forEach((k, v) -> {
			String key = (String) k;
			String value = (String) v;
			switch(key) {
			case "Event":
				event.set(value);
				break;
			case "Layout":
				layout.set(value);
				break;
			default:
				text.put(key, value);
				break;
			}
		});

		editor.parseLayoutString(layout.get(), events.getEvent(event.get()), text);
	}
}